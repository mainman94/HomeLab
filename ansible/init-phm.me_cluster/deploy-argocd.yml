---
- name: Deploy Longhorn and ArgoCD via Helm
  hosts: "{{ groups['kube_control_plane'][0] }}"
  become: true
  vars:
    argocd_namespace: argocd
    argocd_release_name: argocd
    longhorn_namespace: longhorn-system
    longhorn_release_name: longhorn
    traefik_namespace: kube-system
    traefik_release_name: traefik
    helm_repo_url: https://argoproj.github.io/argo-helm
    helm_chart_name: argo-cd
    repo_url: https://github.com/mainman94/phm.me_cluster.git
    repo_path: /tmp/phm.me_cluster
    helm_home: "{{ lookup('env', 'HELM_HOME') | default('~/.helm', true) }}"
    ansible_python_interpreter: "{{ lookup('pipe', 'which python3') }}"
  tasks:
    - name: Install required packages
      apt:
        name:
          - curl
          - git
        state: present
        update_cache: yes

    - name: Install Helm
      block:
        - name: Download Helm installation script
          get_url:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            dest: /tmp/get-helm-3
            mode: '0755'

        - name: Install Helm
          command: /tmp/get-helm-3
          args:
            creates: /usr/local/bin/helm

    - name: Clone repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_path }}"
        version: main
        force: yes

    - name: Add Helm repositories
      command: "helm repo add {{ item.name }} {{ item.url }}"
      with_items:
        - { name: 'argo', url: '{{ helm_repo_url }}' }
        - { name: 'longhorn', url: 'https://charts.longhorn.io' }
        - { name: 'traefik', url: 'https://helm.traefik.io/traefik' }
      args:
        creates: "{{ helm_home }}/repository/{{ item.name }}-index.yaml"

    - name: Update Helm repositories
      command: helm repo update

    - name: Install pipx
      apt:
        name: pipx
        state: present
        update_cache: yes

    - name: Install required Python packages via pipx
      command: "pipx install --include-deps {{ item }}"
      with_items:
        - kubernetes
        - openshift

    - name: Get pipx Python path
      command: pipx environment
      register: pipx_env

    - name: Set Python interpreter
      set_fact:
        ansible_python_interpreter: "{{ pipx_env.stdout | regex_search('PIPX_LOCAL_VENVS=.*') | regex_replace('PIPX_LOCAL_VENVS=(.*)', '\\1/kubernetes/bin/python') }}"

    - name: Create namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      with_items:
        - "{{ longhorn_namespace }}"
        - "{{ argocd_namespace }}"
        - "{{ traefik_namespace }}"

    - name: Deploy Longhorn via Helm
      kubernetes.core.helm:
        name: "{{ longhorn_release_name }}"
        chart_ref: longhorn
        chart_repo_url: https://charts.longhorn.io
        release_namespace: "{{ longhorn_namespace }}"
        chart_version: "1.9.0"
        values_files:
          - "{{ repo_path }}/homelab/bootstrap/longhorn/values.yaml"

    - name: Wait for Longhorn to be ready
      ansible.builtin.shell: "helm status {{ longhorn_release_name }} -n {{ longhorn_namespace }} | grep -q 'STATUS: deployed'"
      register: longhorn_status
      until: longhorn_status.rc == 0
      retries: 30
      delay: 30
      changed_when: false

    - name: Wait for Longhorn pods to be ready
      ansible.builtin.shell: |
        kubectl get pods -n {{ longhorn_namespace }} -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | grep -v "Running\|Completed" | wc -l
      register: longhorn_pods_status
      until: longhorn_pods_status.stdout == "0"
      retries: 30
      delay: 30
      changed_when: false

    - name: Deploy ArgoCD via Helm using values from repository
      kubernetes.core.helm:
        name: "{{ argocd_release_name }}"
        chart_ref: "{{ helm_chart_name }}"
        chart_repo_url: "{{ helm_repo_url }}"
        chart_version: "8.0.14"
        release_namespace: "{{ argocd_namespace }}"
        values_files:
          - "{{ repo_path }}/homelab/bootstrap/argocd/values.yaml"

    - name: Wait for ArgoCD to be ready
      ansible.builtin.shell: "helm status {{ argocd_release_name }} -n {{ argocd_namespace }} | grep -q 'STATUS: deployed'"
      register: argocd_status
      until: argocd_status.rc == 0
      retries: 30
      delay: 30
      changed_when: false

    - name: Wait for ArgoCD pods to be ready
      ansible.builtin.shell: |
        kubectl get pods -n {{ argocd_namespace }} -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | grep -v "Running\|Completed" | wc -l
      register: argocd_pods_status
      until: argocd_pods_status.stdout == "0"
      retries: 30
      delay: 30
      changed_when: false

    - name: Deploy Traefik via Helm using values from repository
      kubernetes.core.helm:
        name: "{{ traefik_release_name }}"
        chart_ref: traefik/traefik
        release_namespace: "{{ traefik_namespace }}"
        chart_version: "35.4.0"
        values_files:
          - "{{ repo_path }}/homelab/bootstrap/traefik/values.yaml"
        values:
          metrics:
            prometheus:
              serviceMonitor:
                enabled: false

    - name: Wait for Traefik to be ready
      ansible.builtin.shell: "helm status {{ traefik_release_name }} -n {{ traefik_namespace }} | grep -q 'STATUS: deployed'"
      register: traefik_status
      until: traefik_status.rc == 0
      retries: 30
      delay: 30
      changed_when: false

    - name: Wait for Traefik pods to be ready
      ansible.builtin.shell: |
        kubectl get pods -n {{ traefik_namespace }} -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | grep -v "Running\|Completed" | wc -l
      register: traefik_pods_status
      until: traefik_pods_status.stdout == "0"
      retries: 30
      delay: 30
      changed_when: false

    - name: Install ArgoCD CLI
      ansible.builtin.shell: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
      args:
        creates: /usr/local/bin/argocd

    - name: Read ArgoCD domain from values file
      ansible.builtin.slurp:
        src: "{{ repo_path }}/homelab/bootstrap/argocd/values.yaml"
      register: argocd_values

    - name: Extract domain from values
      ansible.builtin.set_fact:
        argocd_domain: "{{ (argocd_values.content | b64decode | from_yaml).global.domain }}"

    - name: Configure ArgoCD CLI
      ansible.builtin.shell: |
        argocd login {{ argocd_domain }}:443 --insecure --grpc-web --username admin --password $(kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
      register: argocd_login
      changed_when: false

    - name: Create ArgoCD application
      ansible.builtin.shell: |
        argocd app create init-app-of-apps \
          --repo https://github.com/mainman94/phm.me_cluster.git \
          --path homelab/app-of-app \
          --dest-namespace argocd \
          --dest-server https://kubernetes.default.svc \
      register: argocd_app_create
      changed_when: false

    - name: Sync ArgoCD application
      ansible.builtin.shell: |
        argocd app sync init-app-of-apps
      register: argocd_app_sync
      changed_when: false
