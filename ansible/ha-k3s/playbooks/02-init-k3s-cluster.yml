---
- name: Initialize k3s cluster
  hosts: "{{ groups['kube_control_plane'][0] }}"
  become: true

  tasks:
    - name: Get node IP address
      ansible.builtin.set_fact:
        node_ip: "{{ ansible_default_ipv4.address }}"


    - name: Create k3s config directory
      ansible.builtin.file:
        path: "{{ k3s_config_path }}"
        state: directory
        mode: '0755'

    - name: Initialize first k3s server with embedded etcd
      ansible.builtin.shell: >
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server
        --cluster-init
        --tls-san {{ vip_address }}
        --node-ip {{ node_ip }}
        --disable traefik
        --disable servicelb
        --disable local-storage
        --write-kubeconfig-mode 644
      args:
        creates: "{{ k3s_config_file }}"
      register: k3s_init

    - name: Wait for k3s to be ready
      ansible.builtin.command: k3s kubectl get nodes
      register: k3s_ready
      until: k3s_ready.rc == 0
      retries: 30
      delay: 10

    - name: Save kubeconfig
      ansible.builtin.copy:
        src: "{{ k3s_config_file }}"
        dest: "{{ k3s_config_path }}/kubeconfig.yaml"
        mode: '0644'
        remote_src: true

    - name: Set KUBECONFIG environment variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: 'KUBECONFIG={{ k3s_config_file }}'
        state: present

    - name: Install kubectl
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ k3s_version | regex_replace('^v([0-9]+\\.[0-9]+\\.[0-9]+)\\+k3s.*$', 'v\\1') }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'

    - name: Remove existing k9s
      ansible.builtin.apt:
        name: k9s
        state: absent
      ignore_errors: true

    - name: Download k9s
      ansible.builtin.get_url:
        url: https://github.com/derailed/k9s/releases/download/v0.50.5/k9s_linux_amd64.deb
        dest: /tmp/k9s.deb
        mode: '0644'
        
    - name: Install k9s
      ansible.builtin.apt:
        deb: /tmp/k9s.deb
        state: present

    - name: Wait for node to be ready
      ansible.builtin.command: k3s kubectl get nodes {{ ansible_hostname }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: node_status
      until: node_status.stdout == "True"
      retries: 30
      delay: 10
